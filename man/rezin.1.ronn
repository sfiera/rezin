rezin(1) -- examine the resource fork of legacy files
=====================================================

## SYNOPSIS

`rezin` [<options>] ls [<type> [<id>]]

`rezin` [<options>] cat <type> <id>

`rezin` [<options>] convert <type> <id>

## DESCRIPTION

Rezin provides a set of commands allowing one to examine and extract data from the resource fork of
legacy MacOS files.  It is capable of fetching the resource fork from a number of different
sources, including some which are functional even on systems which do not themselves support the
resource fork (see "[Sources][]" below)

UTF-8 encoding is used throughout the public interfaces of rezin.  Resource type codes will always
be composed of four unicode characters, but as a consequence of UTF-8 encoding, may not always be
four bytes.  Additionally, carriage returns will be converted to newlines in cases where text data
is expected.

The commands are as follows:

 * `ls`:
   For each type in the resource fork, print the code of that type to standard output, one per
   line.

 * `ls` <type>:
   For each resource of type <type> in the resource fork, print the ID and name of that resource to
   standard output, one per line.  The ID and name will be separated by a single tab character.

 * `ls` <type> <id>:
   If there is a resource with type <type> and ID <id>, print the ID and name of that resource to
   standard output, separated by a single tab character.

 * `cat` <type> <id>:
   Print the resource with type <type> and ID <id> to standard output.

 * `convert` <type> <id>:
   If <type> is a known resource type (see "[FORMATS][]" below), convert the resource with type
   <type> and ID <id> to a suitable output format, then print it to standard output.

   If <type> is not a known format, then print a warning to standard error, and dump the resource
   in raw form to standard output.

## OPTIONS

### Sources

These options specify which resource fork to examine.  Exactly one of these options must be
provided with each invocation of rezin.

 * `-a` <file> | `--apple-single`=<file>:
   Read from the AppleSingle-encoded file <file>.  Both big- and little-endian AppleSingle files
   are supported.  Since rezin is concerned only with the resource fork, it will also accept the
   portion of a AppleDouble-encoded file which contains the resource fork.

 * `-r` <file> | `--resource-fork`=<file>:
   Read from the flat file <file>.  On systems which support the resource fork natively, it is
   possible to read from a file's resource fork by appending "/rsrc" to the path of that file, as
   if it were a directory.

 * `-z` <archive>,<file> | `--zip-archive`=<archive>,<file>:
   Read the resource fork of the file <file> within the zip archive <archive>.  This works even on
   systems which do not themselves support the resource fork.

### Output

These options control the generated output of a rezin command.  These are optional.

 * `-l` `cr`|`nl`|`crnl` | `--line-ending`=`cr`|`nl`|`crnl`:
   By default, when reading strings, carriage returns will be converted to newlines, to follow the
   Unix line-ending convention.  This option changes that behavior.  Valid values are `cr` (leave
   them as carriage returns), `nl` (the default), and `crnl` (convert to DOS line-endings).

## FORMATS

The following resource types are supported by rezin:

 * `'clut'`:
   A color table, stored in a MacOS-specific format.  Each resource can store up to 65536 RGB
   colors.  When using the 'convert' command, 'clut' data will be converted to a JSON array of
   strings.

 * `'snd '`:
   Sound data, stored in a MacOS-specific format.  When using the 'convert' command, 'snd ' data
   will be converted to AIFF format.

 * `'STR#'`:
   Arrays of strings, stored in MacRoman encoding.  Each resource can store up to 65536 strings,
   with each string being up to 255 characters.  When using the 'convert' command, 'STR#' data will
   be converted to a JSON array of strings.

 * `'TEXT'`:
   Text data, stored in MacRoman encoding.  When using the 'convert' command, 'TEXT' data will be
   output as text.

## BUGS

Rezin currently does not handle many different resource types.  In addition, it only supports
monophonic 'snd ' data encoded using 8-bit samples.

## SEE ALSO

<http://developer.apple.com/documentation/mac/MoreToolbox/MoreToolbox-99.html>

## AUTHORS

Chris Pickel \<sfiera@gmail.com\>

## COPYING

Copyright (c) 2009 Chris Pickel \<sfiera@gmail.com\>.

This file is part of rezin, a free software project.  You can redistribute it and/or modify it
under the terms of the MIT License.
